{"version":3,"sources":["serviceWorker.js","components/common/input.jsx","components/common/submit.jsx","components/home.jsx","services/httpService.js","components/knowledgePanel.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Input","placeholder","value","handleChange","type","className","onChange","Submit","label","Home","state","query","input","currentTarget","setState","handleSubmit","e","preventDefault","console","log","this","src","alt","width","height","onSubmit","to","React","Component","apiUrl","getData","a","axios","get","KnowledgePanel","name","profile_url","avatar_url","getAllData","props","params","id","data","html_url","Fragment","style","textAlign","href","target","App","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4QAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,iDCJSC,G,MAZH,SAAC,GAAyD,IAAvDC,EAAsD,EAAtDA,YAAaC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,aAAkC,IAApBC,YAAoB,MAAb,OAAa,EACnE,OACE,2BACEC,UAAU,eACVD,KAAMA,EACNH,YAAaA,EACbC,MAAOA,EACPI,SAAUH,MCHDI,EAJF,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACd,OAAO,4BAAQH,UAAU,mBAAmBG,IC2C/BC,E,2MAvCbC,MAAQ,CACNC,MAAO,I,EAGTR,aAAe,YAA+B,IAAbS,EAAY,EAA3BC,cAChB,EAAKC,SAAS,CAAEH,MAAOC,EAAMV,S,EAG/Ba,aAAe,SAAAC,GACbA,EAAEC,iBACFC,QAAQC,IAAI,EAAKT,MAAMC,Q,wEAGf,IACAA,EAAUS,KAAKV,MAAfC,MACR,OACE,yBAAKN,UAAU,yCACb,yBACEgB,IAAI,wEACJC,IAAI,gBACJC,MAAM,QACNC,OAAO,SAET,6CACA,0BAAMC,SAAUL,KAAKL,cACnB,kBAAC,EAAD,CACEd,YAAY,iBACZC,MAAOS,EACPR,aAAciB,KAAKjB,eAErB,kBAAC,IAAD,CAAMuB,GAAE,WAAMf,IACZ,kBAAC,EAAD,CAAQH,MAAM,kB,GAhCPmB,IAAMC,W,0CCJnBC,EAAS,gCAER,SAAeC,EAAtB,kC,4CAAO,WAAuBnB,GAAvB,SAAAoB,EAAA,sEACQC,IAAMC,IAAIJ,EAASlB,GAD3B,oF,0BCyCQuB,E,2MAzCbxB,MAAQ,CACNyB,KAAM,GACNC,YAAa,GACbC,WAAY,I,EAOdC,W,sBAAa,gCAAAP,EAAA,6DACHhC,EAAU,EAAKwC,MAAfxC,MADG,SAGY+B,EAAQ/B,EAAMyC,OAAOC,IAHjC,gBAGHC,EAHG,EAGHA,KACRxB,QAAQC,IAAIuB,GAEZ,EAAK5B,SAAS,CACZsB,YAAaM,EAAKC,SAClBN,WAAYK,EAAKL,WACjBF,KAAMO,EAAKP,OATF,2C,mFAHXf,KAAKkB,e,+BAgBG,IAAD,EACmClB,KAAKV,MAAvCyB,EADD,EACCA,KAAMC,EADP,EACOA,YAAaC,EADpB,EACoBA,WAC3B,OACE,kBAAC,IAAMO,SAAP,KACE,yBAAKC,MAAO,CAAEC,UAAW,WACvB,0DACA,yBAAKzB,IAAKgB,EAAYf,IAAKa,EAAMZ,MAAM,QAAQC,OAAO,UACtD,4BACE,uBAAGuB,KAAMX,EAAaY,OAAO,WAC1Bb,U,GAjCcR,IAAMC,WCcpBqB,G,uLATX,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,OAAOC,UAAWjB,IAC9B,kBAAC,IAAD,CAAOgB,KAAK,IAAIC,UAAW1C,S,GALjBkB,IAAMC,Y,kBCGxBwB,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SPoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.94b80bef.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nlet Input = ({ placeholder, value, handleChange, type = \"text\" }) => {\r\n  return (\r\n    <input\r\n      className=\"form-control\"\r\n      type={type}\r\n      placeholder={placeholder}\r\n      value={value}\r\n      onChange={handleChange}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\n\r\nlet Submit = ({ label }) => {\r\n  return <button className=\"btn btn-primary\">{label}</button>;\r\n};\r\n\r\nexport default Submit;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./home.css\";\r\nimport Input from \"./common/input\";\r\nimport Submit from \"./common/submit\";\r\n\r\nclass Home extends React.Component {\r\n  state = {\r\n    query: \"\"\r\n  };\r\n\r\n  handleChange = ({ currentTarget: input }) => {\r\n    this.setState({ query: input.value });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    console.log(this.state.query);\r\n  };\r\n\r\n  render() {\r\n    const { query } = this.state;\r\n    return (\r\n      <div className=\"container search-container home-style\">\r\n        <img\r\n          src=\"https://github.githubassets.com/images/modules/logos_page/Octocat.png\"\r\n          alt=\"GitHub search\"\r\n          width=\"200px\"\r\n          height=\"auto\"\r\n        />\r\n        <h1>GitHub Search</h1>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <Input\r\n            placeholder=\"Enter username\"\r\n            value={query}\r\n            handleChange={this.handleChange}\r\n          />\r\n          <Link to={`/${query}`}>\r\n            <Submit label=\"Search\" />\r\n          </Link>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import axios from \"axios\";\r\n\r\nconst apiUrl = \"https://api.github.com/users/\";\r\n\r\nexport async function getData(query) {\r\n  return await axios.get(apiUrl + query);\r\n}\r\n","import React from \"react\";\r\nimport { getData } from \"../services/httpService\";\r\n\r\nclass KnowledgePanel extends React.Component {\r\n  state = {\r\n    name: \"\",\r\n    profile_url: \"\",\r\n    avatar_url: \"\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getAllData();\r\n  }\r\n\r\n  getAllData = async () => {\r\n    const { match } = this.props;\r\n\r\n    const { data } = await getData(match.params.id);\r\n    console.log(data);\r\n\r\n    this.setState({\r\n      profile_url: data.html_url,\r\n      avatar_url: data.avatar_url,\r\n      name: data.name\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { name, profile_url, avatar_url } = this.state;\r\n    return (\r\n      <React.Fragment>\r\n        <div style={{ textAlign: \"center\" }}>\r\n          <h1>Welcome to knowledge panel</h1>\r\n          <img src={avatar_url} alt={name} width=\"200px\" height=\"200px\" />\r\n          <h2>\r\n            <a href={profile_url} target=\"_blanck\">\r\n              {name}\r\n            </a>\r\n          </h2>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default KnowledgePanel;\r\n","import React from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport Home from \"./components/home\";\r\nimport KnowledgePanel from \"./components/knowledgePanel\";\r\nimport \"./App.css\";\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <Switch>\r\n        <Route path=\"/:id\" component={KnowledgePanel} />\r\n        <Route path=\"/\" component={Home} />\r\n      </Switch>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"font-awesome/css/font-awesome.css\";\r\n\r\nReactDOM.render(\r\n  <Router>\r\n    <App />\r\n  </Router>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}